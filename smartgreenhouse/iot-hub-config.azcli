#!/usr/bin/env bash

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null && pwd)"
DEVICE_CONNECTION_STRINGS_FILE="$DIR/telemetry/device-connection-strings"
EVENT_HUB_CONNECTION_STRING_FILE="$DIR/webapp/event-hub-connection-strings"
RESOURCE_GROUP_NAME=smart-greenhouse
LOCATION=westeurope
IOT_HUB_NAME=smart-greenhouse-iot-hub
SKU=F1
DEVICES=(
    SoilSensorsDevice-1     SoilSensorsDevice-2
    AirSensorsDevice
    IrrigationController-1  IrrigationController-2
    HeaterController
    WindowController
)
GET_CONNECTION_STRINGS=

function usage() {
    echo -n "Usage: $(basename "$0") [OPTION]...

Options:
    -r, --resource-group-name       Name of the resource group (default is '$RESOURCE_GROUP_NAME').
    -l, --location                  Location of the resource group (for creation, default is '$LOCATION').
    -i, --iot-hub-name              Name of the IoT Hub (default is '$IOT_HUB_NAME').
    -s, --sku                       SKU of the IoT Hub (for creation, default is '$SKU').
    -g, --get-connection-strings    Only regenerate the connection strings file.
    -h, --help                      Show this help.
"
}

while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
        -r|--resource-group-name)
            RESOURCE_GROUP_NAME="$2"
            shift 2
            ;;
        -l|--location)
            LOCATION="$2"
            shift 2
            ;;
        -i|--iot-hub-name)
            IOT_HUB_NAME="$2"
            shift 2
            ;;
        -s|--sku)
            SKU="$2"
            shift 2
            ;;
        -g|--get-connection-strings)
            GET_CONNECTION_STRINGS=1
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)  # unknown arguments
            echo -e "\e[91merror: unknown argument '$1'\e[39m" >/dev/stderr
            usage
            exit 1
            ;;
    esac
done

function create_resource_group() {
    if [ $(az group exists -g $RESOURCE_GROUP_NAME) = false ]; then
        echo "create resource group '$RESOURCE_GROUP_NAME' for '$LOCATION'"
        az group create -g $RESOURCE_GROUP_NAME -l $LOCATION
    fi
}

function create_iot_hub() {
    if ! az iot hub show -n $IOT_HUB_NAME >/dev/null 2>&1; then
        echo "create iot hub '$IOT_HUB_NAME' with pricing tier '$SKU' in resource group '$RESOURCE_GROUP_NAME'"
        az iot hub create -n $IOT_HUB_NAME -g $RESOURCE_GROUP_NAME --sku $SKU

        echo "add default service event hub connection string for iot hub '$IOT_HUB_NAME' to '$EVENT_HUB_CONNECTION_STRING_FILE'"
        get_default_event_hub_connection_string | tee $EVENT_HUB_CONNECTION_STRING_FILE
    fi
}

function get_default_event_hub_connection_string() {
    local key_names=("Endpoint" "EntityPath" "SharedAccessKeyName" "SharedAccessKey")
    local values
    mapfile -t values < <(az iot hub show -g cloudeteer-demo -n smart-greenhouse --query 'properties.eventHubEndpoints.events.[endpoint, path]' -o tsv)
    values+=("service")
    values+=($(az iot hub policy show --hub-name smart-greenhouse --name service --query primaryKey -o tsv))
    local connection_string=$(paste -d "=" <(printf "%s\n" "${key_names[@]}") <(printf "%s\n" "${values[@]}") | paste -sd ";")

    echo "$connection_string"
}

function get_registered_devices() {
    local -n devices=$1

    while IFS= read -r device
    do
        devices["$device"]=
    done < <(az iot hub device-identity list -g $RESOURCE_GROUP_NAME -n $IOT_HUB_NAME --query '[][deviceId]' -o tsv)
}

function register_devices() {
    declare -A already_registered_devices
    get_registered_devices already_registered_devices

    # register all unregistered devices
    for device in "${DEVICES[@]}"
    do
        if [[ ! -v already_registered_devices["$device"] ]]; then
            echo "register device '$device' at iot hub '$IOT_HUB_NAME' in resource group '$RESOURCE_GROUP_NAME'"
            az iot hub device-identity create -g $RESOURCE_GROUP_NAME -n $IOT_HUB_NAME -d $device

            echo "add connection string for '$device' to '$DEVICE_CONNECTION_STRINGS_FILE'"
            az iot hub device-identity show-connection-string -g $RESOURCE_GROUP_NAME -n $IOT_HUB_NAME -d $device -o tsv | tee -a "$DEVICE_CONNECTION_STRINGS_FILE"
        fi
    done
}

function configure_azure() {
    create_resource_group
    create_iot_hub
    register_devices
}

function get_connection_strings() {
    declare -A already_registered_devices
    get_registered_devices already_registered_devices

    echo "add default service event hub connection string for iot hub '$IOT_HUB_NAME' to '$EVENT_HUB_CONNECTION_STRING_FILE'"
    get_default_event_hub_connection_string | tee $EVENT_HUB_CONNECTION_STRING_FILE

    # open connection strings file for writing (override)
    exec 3>"$DEVICE_CONNECTION_STRINGS_FILE"

    local device
    for device in ${!already_registered_devices[@]}
    do
        echo "add connection string for '$device' to '$DEVICE_CONNECTION_STRINGS_FILE'"
        az iot hub device-identity show-connection-string -g $RESOURCE_GROUP_NAME -n $IOT_HUB_NAME -d $device -o tsv | tee -a /dev/fd/3
    done

    # close file
    exec 3>&-
}

if [ -z $GET_CONNECTION_STRINGS ]; then
    configure_azure
else
    get_connection_strings
fi
